// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: devcal.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventsService_InsertEvent_FullMethodName = "/devcal.EventsService/InsertEvent"
	EventsService_GetEvent_FullMethodName    = "/devcal.EventsService/GetEvent"
	EventsService_ListEvents_FullMethodName  = "/devcal.EventsService/ListEvents"
	EventsService_FindEvents_FullMethodName  = "/devcal.EventsService/FindEvents"
	EventsService_UpdateEvent_FullMethodName = "/devcal.EventsService/UpdateEvent"
	EventsService_DeleteEvent_FullMethodName = "/devcal.EventsService/DeleteEvent"
)

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsServiceClient interface {
	InsertEvent(ctx context.Context, in *InsertEventParams, opts ...grpc.CallOption) (*Event, error)
	GetEvent(ctx context.Context, in *GetEventParams, opts ...grpc.CallOption) (*Event, error)
	ListEvents(ctx context.Context, in *ListEventsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	FindEvents(ctx context.Context, in *FindEventsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	UpdateEvent(ctx context.Context, in *UpdateEventParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEvent(ctx context.Context, in *DeleteEventParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) InsertEvent(ctx context.Context, in *InsertEventParams, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventsService_InsertEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) GetEvent(ctx context.Context, in *GetEventParams, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventsService_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) ListEvents(ctx context.Context, in *ListEventsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventsService_ServiceDesc.Streams[0], EventsService_ListEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListEventsParams, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsService_ListEventsClient = grpc.ServerStreamingClient[Event]

func (c *eventsServiceClient) FindEvents(ctx context.Context, in *FindEventsParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventsService_ServiceDesc.Streams[1], EventsService_FindEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FindEventsParams, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsService_FindEventsClient = grpc.ServerStreamingClient[Event]

func (c *eventsServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventsService_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventsService_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServiceServer is the server API for EventsService service.
// All implementations must embed UnimplementedEventsServiceServer
// for forward compatibility.
type EventsServiceServer interface {
	InsertEvent(context.Context, *InsertEventParams) (*Event, error)
	GetEvent(context.Context, *GetEventParams) (*Event, error)
	ListEvents(*ListEventsParams, grpc.ServerStreamingServer[Event]) error
	FindEvents(*FindEventsParams, grpc.ServerStreamingServer[Event]) error
	UpdateEvent(context.Context, *UpdateEventParams) (*emptypb.Empty, error)
	DeleteEvent(context.Context, *DeleteEventParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedEventsServiceServer()
}

// UnimplementedEventsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsServiceServer struct{}

func (UnimplementedEventsServiceServer) InsertEvent(context.Context, *InsertEventParams) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (UnimplementedEventsServiceServer) GetEvent(context.Context, *GetEventParams) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventsServiceServer) ListEvents(*ListEventsParams, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedEventsServiceServer) FindEvents(*FindEventsParams, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method FindEvents not implemented")
}
func (UnimplementedEventsServiceServer) UpdateEvent(context.Context, *UpdateEventParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventsServiceServer) DeleteEvent(context.Context, *DeleteEventParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventsServiceServer) mustEmbedUnimplementedEventsServiceServer() {}
func (UnimplementedEventsServiceServer) testEmbeddedByValue()                       {}

// UnsafeEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServiceServer will
// result in compilation errors.
type UnsafeEventsServiceServer interface {
	mustEmbedUnimplementedEventsServiceServer()
}

func RegisterEventsServiceServer(s grpc.ServiceRegistrar, srv EventsServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventsService_ServiceDesc, srv)
}

func _EventsService_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertEventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_InsertEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).InsertEvent(ctx, req.(*InsertEventParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).GetEvent(ctx, req.(*GetEventParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_ListEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServiceServer).ListEvents(m, &grpc.GenericServerStream[ListEventsParams, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsService_ListEventsServer = grpc.ServerStreamingServer[Event]

func _EventsService_FindEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindEventsParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServiceServer).FindEvents(m, &grpc.GenericServerStream[FindEventsParams, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsService_FindEventsServer = grpc.ServerStreamingServer[Event]

func _EventsService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).UpdateEvent(ctx, req.(*UpdateEventParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).DeleteEvent(ctx, req.(*DeleteEventParams))
	}
	return interceptor(ctx, in, info, handler)
}

// EventsService_ServiceDesc is the grpc.ServiceDesc for EventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devcal.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertEvent",
			Handler:    _EventsService_InsertEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventsService_GetEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventsService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventsService_DeleteEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEvents",
			Handler:       _EventsService_ListEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindEvents",
			Handler:       _EventsService_FindEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "devcal.proto",
}
